Reimplement Thud player
✓ C++(11) because of abstraction limitations in C
? use game state representation amenable to machine learning (cf Giraffe)
✓ decouple UI from computer player
* decouple each side's computer players from each other
* enable easy comparison between differing versions of code/parameters
* allow "pondering" - thinking on opponent's turn
* use same code for interactive play, self play learning, subprocess
* proper up-front testing (tdd, quickcheck-type properties, more?)
* proper on-disk format for storing game data (likely sqlite)
✓ build with cmake and ninja

non-goals
* do everything at once

rough task order (TEST ALL THE THINGS)
✓ game state representation
✓ bulk move generation
✓ do move
✓ minimal evaluator
✓ mcts
✓ naive minimax
✓ iterative deepening
✓ zobrist hashing
✓ ttable
✓ alpha-beta pruning
✓ search extension (eg for sacrifice moves)
✓ UI of some sort
* fat evaluator
* game data serialization format
* automatic tuning of fat evaluator
* move ordering
* undo move
* incremental move generation (not boost coroutine2, too bulky)
* some kind of game tree debugging tool thingy
* mtd(f) (for help with ttable debugging)

a smidge of an idea for smarter heuristics
* during search, identify places where having a piece available would be good
* nudge upward the heuristic weight of moves leaving a piece in those places
* how to keep track of nudges?
* how to abstract over nudges?
* essentially saying "if your descendent looks like this, try to move there"

some ideas for simple learning
* remember all game states for games actually played
* also shallow re-search all non-taken moves from actual-play game states to ensure they are in the ttable written to disk
* record how many times game states show up in actual-play games, with the average score at the end of the game, and how recently they appeared in actual-play
* keep count of actual-play games, and age out states without recent plays
* record game states in 8-fold symmetry

useful info to track and display
* number of ttable entries used as-is
* number of ttable entries refined
* number of ttable entries created
* number of positions search-extended
* number of alpha cutoffs
* number of beta cutoffs
* some kind of data about positions searched at each depth?

some ideas for smarter search
* identify threats and form a circle around them
* do a search only within that circle
  * nothing moves in ("wish" moves could be considered in a future version)
  * moves out are abstracted (direction + minimum distance)
* if the circle is in balance (available moves get punished), then what?
  * use as move ordering heuristic?
  * ie, if a piece is threatened and an exit move ends the threat, search that
* current threats are easy to find, search threat-deal-withs first?
* "if I had a piece here, I could attack that" then search for usable piece

HOW TO DO FOCUSED SEARCH (one way at least)
* split dwarf move into two levels
  * choose piece on board (either dwarf OR troll)
  * choose from all dwarf moves that involve that piece
    * captures of
    * captures by
    * threats from
    * threats to
* that way certain pieces can be identified as being more rewarding to search
* and being able to choose a troll allows search to focus on evading/attacking
* OPEN QUESTION: does the same win-tracking metric work in this case?
  * would some other metric work better?

thoughts about heuristic
* capture the notion of counterthreat
  * my dwarf is threatened by your troll
  * but if you take my dwarf, I take your troll and you're behind on points
* needs to give guidance when alternate paths are tactically equivalent
  * such as opening moves
  * such as must lose one of multiple pieces, which one escapes

thoughts about variable depth search
* if heuristic shows no change, reduce depth
* if heuristic shows change, keep depth
* if sacrifice move being considered, increase depth
* what is null move search depth reduction?

-----

THUD LOCAL SEARCH THOUGHTS
the central idea is use shallow search to prune deep search, and decompose deep search into nearly independent subgames

determining hot spots is the key to this approach, and is harder than it appears at first

how to determine hot spots?
 do a shallow search, recording every capture?
 or look at threats only?
 or search, recording threats?
 how to avoid considering stupid moves as hot spots?
 perhaps only consider moves that aren't pruned by alphabeta?
 perhaps only look at present threats?
 but that misses proximate threats that need to be dealt with in advance, such as dwarf's traps

from an actual game state, a hot spot is at least a place where a piece is in threat
 how to search the tree and find future hot spots that aren't stupid?

once hot spots are determined:
 search each hot spot, including null move option
 the purpose is to discover a refutation of the null move
 if the null move is dominated, then action in the hot spot is necessary
 is the null move is not dominated, then action is not urgent
 if all hot spots allow null move, then perhaps the game is over?

once search is done:
 if multiple hot spots need action, search interleaves of moves to find the least bad option

-----

this idea is not obviously applicable to the opening moves of the game
game start is highly symmetrical: only 4 dwarfs need be considered
should dwarf just start with those 4 as the initial hot spot? does that do the right thing?
no because it abstracts moves out of the hot spot, which isn't what is needed at game start
decent opening book is probably the answer
only a few dwarf moves make sense at the beginning of the game
so search those 4 dwarfs to 6 ply or so, then hot spot search 6-10 more ply, replicate by symmetries (including during search to help with transpositions in the first few moves), and save the resulting ttable as the opening book

-----

hot spot searches need to be cached in the ttable separate from full width search and each other

it's not clear how to handle searches with more than one active hot spot

solution!
treat hot spot searches as evaluating a heuristic value adjustment and just add the minimaxed heuristic change for each hot spot to the heuristic value of the starting state

more sophisticated incorporations of hot spot search results are possible but this is simple and reasonable

